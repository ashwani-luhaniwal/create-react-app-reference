// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class HelloWorld extends _react.Component {
    constructor(props) {
        // calls parent's constructor using super(props).
        super(props);
        // set property on class called "state"
        this.state = { greeting: 'Hello' };
        // Tells JavaScript, any time you see a reference to "this" inside of the frenchify
        // function, please refer to ME.
        this.frenchify = this.frenchify.bind(this);
        this.removeGreeting = this.removeGreeting.bind(this);
    }
    frenchify() {
        // setState only changes keys that are specified inside of state, it doesn't replace
        // the entire state.
        this.setState({ greeting: 'Bonjour' });
    }
    removeGreeting() {
        this.props.removeGreeting(this.props.name);
    }
    render() {
        return (
            _react2.default.createElement('div', { className: 'HelloWorld', __source: { fileName: _jsxFileName, lineNumber: 36 }, __self: this },
                this.state.greeting, ' ', this.props.name, '!',
                _react2.default.createElement('br', { __source: { fileName: _jsxFileName, lineNumber: 38 }, __self: this }),
                _react2.default.createElement('button', { className: 'frenchify', onClick: this.frenchify, __source: { fileName: _jsxFileName, lineNumber: 39 }, __self: this }, 'Frenchify!'),
                _react2.default.createElement('br', { __source: { fileName: _jsxFileName, lineNumber: 40 }, __self: this }),
                _react2.default.createElement('button', { className: 'remove', onClick: this.removeGreeting, __source: { fileName: _jsxFileName, lineNumber: 41 }, __self: this }, 'Remove Me!')));


    }} renders and matches our snapshot 1`] = `
<div
  className="HelloWorld"
>
  Hello
   
  Person
  !
  <br />
  <button
    className="frenchify"
    onClick={[Function]}
  >
    Frenchify!
  </button>
  <br />
  <button
    className="remove"
    onClick={[Function]}
  >
    Remove Me!
  </button>
</div>
`;
